trigger:
- main

pool:
  vmImage: ubuntu-latest
# Define variable for environment
variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 
stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformVlidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifact
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline' 
        - task: TerraformInstaller@0
          displayName: Terraform Install 
          inputs:
            terraformVersion: '0.13.5'
        - task: TerraformCLI@0
          displayName: Terraform Init 
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-aks-azurerm-svc-con'
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmStorageAccountName: 'nehastoragebackend'
            backendAzureRmContainerName: 'tfstatfile'
            backendAzureRmKey: 'aks-base.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            allowTelemetryCollection: false
  - stage: DeployAKSCluster
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        pool:
          vmImage: ubuntu-latest
        environment: ${DEV_ENVIRONMENT} 
        strategy:
          runOnce:
             deploy:
              steps:
                - task: DownloadSecureFile@1
                  displayName: Download SSH Key
                  name: sshkey  
                  inputs:
                    secureFile: 'aks-terraform-dosshkey.pub'
                - task: TerraformCLI@0
                  displayName: Terraform Init 
                  inputs:
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    backendType: 'azurerm'
                    backendServiceArm: 'terraform-aks-azurerm-svc-con'
                    backendAzureRmResourceGroupName: 'terraform-storage-rg'
                    backendAzureRmStorageAccountName: 'nehastoragebackend'
                    backendAzureRmContainerName: 'tfstatfile'
                    backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                    allowTelemetryCollection: false
                - task: TerraformCLI@0
                  displayName: Terraform Plan
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-azurerm-svc-con'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)  -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out -var environment=$(DEV_ENVIRONMENT)'
                    allowTelemetryCollection: false
                - task: TerraformCLI@0
                  displayName: Terraform Apply
                  inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'terraform-aks-azurerm-svc-con'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false
             